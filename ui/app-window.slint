import { Button, VerticalBox, TextEdit, LineEdit, ComboBox } from "std-widgets.slint";
import { Buttoner, CalculateLineEdit, CalculateText } from "my-components.slint";
import { CalculateComponent } from "calculate-window.slint";
import { FuelComponent } from "fuel-window.slint";
import { AddNew } from "add-new.slint";

export struct Row  {
    name: string,
    value: float,
    checked: bool,
    timespan: string,
    to_delete: bool,
}

export component AppWindow inherits Window {
    property <color> first_back: #242a3b;
    property <color> second_back: #39516e;
    property <color> third_back: #3c75aa;
    property <color> font_color: #ffffffcc;
    property <length> border_radius_val: 10px;

    in-out property <int> active-tab: 0;
    in-out property <string> selected_timespan: "Daily";
    in-out property <float> cost;
    in-out property <float> day_value;
    in-out property <float> week_value;
    in-out property <float> month_value;
    in-out property <float> year_value;

    in-out property <string> sorter_box_val;
    in-out property <string> adder_box_val;
    in-out property <float> add_cost;
    in-out property <string> add_name;

    in-out property <float> total_cost;

    in-out property <float> _fuel_cost;
    in-out property <float> _distance;
    in-out property <float> _consumption;
    in-out property <float> _total_value;

    preferred-height: 380px;
    min-width: 350px;
    min-height: 300px;
    callback request-change-cost-estimations();
    callback add-element(string, float);

    callback todo-added(string, float, string);
    callback remove-done();
    callback apply_sorting_and_filtering();
    callback sum_expenses();
    callback request-fuel-cost-estimations(float, float, float);

    in property <bool> show-header: false;
    in-out property <bool> is-sort-by-name: false;
    in-out property <bool> hide-done-items: false;

    in property <[Row]> todo-model: [
        { name: "Internet", value: 20, checked: true, timespan: "Daily", to_delete: false },
        { name: "Coffee", value: 120, checked: false, timespan: "Daily", to_delete: false },
        { name: "Gym Pass", value: 30, checked: true, timespan: "Daily", to_delete: false },
    ];

    icon: @image-url("icons/graph.svg");
    background: @linear-gradient(135deg, first_back 15%, second_back 50%, third_back 100%);
    GridLayout {
        Row {
            HorizontalLayout { // Title 
                padding: 3px;
                spacing: root.width / 6;
                height: 60px;
                Text {
                    text: "My Finance";
                    preferred-height: root.height / 3;
                    color: font_color;
                    font-italic: true;
                    font-size: 35px;
                    vertical-alignment: top;
                    horizontal-alignment: center;
                }
            }
        }

        VerticalLayout {
            preferred-height: 200px;
            Rectangle {
                clip: true;
                AddNew { // Add New Tab
                    x: root.active-tab == 0 ? 0 : root.active-tab < 0 ? - self.width - 1px : parent.width + 1px;
                    animate x {
                        duration: 125ms;
                        easing: ease;
                    }
                    todo-added(string, float, string) => {
                        root.todo-added(string, float, string);
                    }
                    remove-done() => {
                        root.remove-done();
                    }
                    apply_sorting_and_filtering() => {
                        root.apply_sorting_and_filtering();
                    }
                    sum_expenses => {
                        root.sum_expenses();
                    }
                    show-header <=> root.show-header;
                    is-sort-by-name <=> root.is-sort-by-name;
                    hide-done-items <=> root.hide-done-items;
                    todo-model <=> root.todo-model;
                    total_cost <=> root.total_cost;
                }

                CalculateComponent { // Calculate
                    background: second_back;
                    x: root.active-tab == 1 ? 0 : root.active-tab < 1 ? - self.width - 1px : parent.width + 1px;
                    cost <=> root.cost;
                    day_value <=> root.day_value;
                    week_value <=> root.week_value;
                    month_value <=> root.month_value;
                    year_value <=> root.year_value;
                    selected_timespan <=> root.selected_timespan;
                    request-change-cost-estimations => {
                        root.request-change-cost-estimations();
                    }
                }

                FuelComponent { // Settings
                    // background: third_back;
                    x: root.active-tab == 2 ? 0 : root.active-tab < 2 ? - self.width - 1px : parent.width + 1px;
                    animate x {
                        duration: 125ms;
                        easing: ease;
                    }
                    fuel_cost <=> root._fuel_cost;
                    distance <=> root._distance;
                    consumption <=> root._consumption;
                    total_value <=> root._total_value;
                    request-fuel-cost-estimations => {
                        root.request-fuel-cost-estimations(root._fuel_cost, root._distance, root._consumption);
                    }
                }
            }

            tab_bar := HorizontalLayout {
                // spacing: 1px;
                Buttoner {
                    border-radius: 1px;
                    text: "Add new";
                    clicked => {
                        root.active-tab = 0;
                    }
                }

                Buttoner {
                    border-radius: 1px;
                    text: "Calculate";
                    clicked => {
                        root.active-tab = 1;
                    }
                }

                Buttoner {
                    border-radius: 1px;
                    text: "Fuel cost  ";
                    clicked => {
                        root.active-tab = 2;
                    }
                }
            }
        }
    }
}
