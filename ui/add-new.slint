// Copyright Â© SixtyFPS GmbH <info@slint.dev>
// SPDX-License-Identifier: MIT

import { Button, LineEdit, ListView, Switch } from "std-widgets.slint";
import { Buttoner, MyComboBox, CalculateText, CalculateLineEdit } from "my-components.slint";

export struct Row  {
    name: string,
    value: float,
    checked: bool,
    timespan: string,
    to_delete: bool,
}

export component AddNew inherits Rectangle {
    in property <[Row]> todo-model: [
        { name: "Internet", value: 20, checked: true, timespan: "Daily", to_delete: false },
        { name: "Coffee", value: 120, checked: false, timespan: "Daily", to_delete: false },
        { name: "Gym Pass", value: 30, checked: true, timespan: "Daily", to_delete: false },
    ];

    in property <bool> show-header: false;
    in-out property <bool> is-sort-by-name: false;
    in-out property <bool> hide-done-items: false;

    in-out property <string> sorter_box_val;
    in-out property <string> adder_box_val;
    in-out property <string> name;
    in-out property <float> cost;
    in-out property <float> total_cost;

    callback todo-added(string, float, string);
    callback remove-done();
    callback apply_sorting_and_filtering();
    callback sum_expenses();

    preferred-width: 400px;
    preferred-height: 600px;

    Image { 
        source: @image-url("icons/graph.svg");
        image-fit: ImageFit.contain;
        colorize: #1a1e2b;
        width: 350px;
    }

    VerticalLayout {
        HorizontalLayout {
            spacing: 52px;
            property <length> font_size: 20px;
            height: 35px;
            Text {
                width: parent.width /3;
                vertical-alignment: center;
                horizontal-alignment: left;
                height: parent.height;
                text: "         Name ";
                font-size: font_size;
            }
            Text {
                width: parent.width /3;
                vertical-alignment: center;
                height: parent.height;
                text: " Cost ";
                font-size: font_size;
            }
            Rectangle {}
            // sorter_box := MyComboBox {
            //     width: parent.width / 4;
            //     selected => {
            //         root.sorter_box_val = self.current_value;
            //     }
            // }
        }
        list-view := ListView {
            for element in root.todo-model: HorizontalLayout {
                spacing: 23px;
                Switch {
                    toggled => {
                        element.checked = self.checked;
                        root.sum_expenses();
                    }
                    checked: element.checked;
                }
                Text {
                    height: 30px;
                    width: parent.width/3 - 10px;
                    text: "\{element.name}";
                    opacity: element.checked? 1 : 0.6;
                    font-size: 20px;
                    vertical-alignment: center;
                }
                Text {
                    height: 30px;
                    width: parent.width/3;
                    text: "\{element.value}";
                    opacity: element.checked? 1 : 0.6;
                    font-size: 20px;
                    vertical-alignment: center;
                    horizontal-alignment: left;
                }
                delete_button := Buttoner {
                    height: 30px;
                    Image {
                        source: @image-url("icons/bin.svg");
                        image-fit: ImageFit.contain;
                        height: parent.height - 5px;
                        width: parent.width;
                    }
                    width: 5%;
                    clicked => {  
                        element.to-delete = true;
                        root.remove-done();
                        root.sum_expenses();
                     }
                }
            }
        }
        HorizontalLayout {
            CalculateText {
                height: 40px;
                width: 2 * parent.width / 3;
                opacity: 1;
                text_value: "Total Cost";
                font-size: 18px;
            }            
            CalculateLineEdit {
                width: parent.width / 3;
                text: "\{root.total_cost}";
            }
        }
        Rectangle {
            width: root.width;
            height: 3px;
        }
        HorizontalLayout {
            // TextInput fields for new values
            text-edit := LineEdit {
                input-type: InputType.text;
                width: 2 * parent.width / 4;
                placeholder-text: "New Name";
                accepted(text) => {
                                root.todo-added(self.text, value-edit.text.to-float(), root.adder_box_val);
                                self.text = "";
                            }
            }
            value-edit := LineEdit {
                input-type: InputType.decimal;
                width: parent.width / 4;
                placeholder-text: "New cost";
                accepted(text) => {
                    root.todo-added(text-edit.text, self.text.to-float(), root.adder_box_val);
                    self.text = "";
                }
            }
            Rectangle {
                background: #1e1e24;
            }
            // MyComboBox {
            //     width: parent.width / 4;
            //     selected => {
            //         root.adder_box_val = self.current-value;
            //     }
            // }
        }
        // Button to add a new row
        btn := Button {
                clicked => {
                    root.todo-added(text-edit.text, value-edit.text.to-float(), root.adder_box_val);
                    text-edit.text = "";
                    value-edit.text = "";
                    root.sum_expenses();
                }
                text: "Add New Entry";
                enabled: text-edit.text != "";
            }
    }
}
